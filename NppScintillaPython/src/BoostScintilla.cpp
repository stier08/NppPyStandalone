		.def("AddText", &ScintillaWrapper::AddText, "Add text to the document at current position.")
		.def("AddStyledText", &ScintillaWrapper::AddStyledText, "Add array of cells to document.")
		.def("InsertText", &ScintillaWrapper::InsertText, "Insert string at a position.")
		.def("ClearAll", &ScintillaWrapper::ClearAll, "Delete all text in the document.")
		.def("ClearDocumentStyle", &ScintillaWrapper::ClearDocumentStyle, "Set all style bytes to 0, remove all folding information.")
		.def("GetLength", &ScintillaWrapper::GetLength, "Returns the number of bytes in the document.")
		.def("GetCharAt", &ScintillaWrapper::GetCharAt, "Returns the character byte at the position.")
		.def("GetCurrentPos", &ScintillaWrapper::GetCurrentPos, "Returns the position of the caret.")
		.def("GetAnchor", &ScintillaWrapper::GetAnchor, "Returns the position of the opposite end of the selection to the caret.")
		.def("GetStyleAt", &ScintillaWrapper::GetStyleAt, "Returns the style byte at the position.")
		.def("Redo", &ScintillaWrapper::Redo, "Redoes the next action on the undo history.")
		.def("SetUndoCollection", &ScintillaWrapper::SetUndoCollection, "Choose between collecting actions into the undo\nhistory and discarding them.")
		.def("SelectAll", &ScintillaWrapper::SelectAll, "Select all the text in the document.")
		.def("SetSavePoint", &ScintillaWrapper::SetSavePoint, "Remember the current position in the undo history as the position\nat which the document was saved.")
		.def("GetStyledText", &ScintillaWrapper::GetStyledText, "Retrieve a buffer of cells.\nReturns the number of bytes in the buffer not including terminating NULs.")
		.def("CanRedo", &ScintillaWrapper::CanRedo, "Are there any redoable actions in the undo history?")
		.def("MarkerLineFromHandle", &ScintillaWrapper::MarkerLineFromHandle, "Retrieve the line number at which a particular marker is located.")
		.def("MarkerDeleteHandle", &ScintillaWrapper::MarkerDeleteHandle, "Delete a marker.")
		.def("GetUndoCollection", &ScintillaWrapper::GetUndoCollection, "Is undo history being collected?")
		.def("GetViewWS", &ScintillaWrapper::GetViewWS, "Are white space characters currently visible?\nReturns one of SCWS_* constants.")
		.def("SetViewWS", &ScintillaWrapper::SetViewWS, "Make white space characters invisible, always visible or visible outside indentation.")
		.def("PositionFromPoint", &ScintillaWrapper::PositionFromPoint, "Find the position from a point within the window.")
		.def("PositionFromPointClose", &ScintillaWrapper::PositionFromPointClose, "Find the position from a point within the window but return\nINVALID_POSITION if not close to text.")
		.def("GotoLine", &ScintillaWrapper::GotoLine, "Set caret to start of a line and ensure it is visible.")
		.def("GotoPos", &ScintillaWrapper::GotoPos, "Set caret to a position and ensure it is visible.")
		.def("SetAnchor", &ScintillaWrapper::SetAnchor, "Set the selection anchor to a position. The anchor is the opposite\nend of the selection from the caret.")
		.def("GetCurLine", &ScintillaWrapper::GetCurLine, "Retrieve the text of the line containing the caret.\nReturns the index of the caret on the line.")
		.def("GetEndStyled", &ScintillaWrapper::GetEndStyled, "Retrieve the position of the last correctly styled character.")
		.def("ConvertEOLs", &ScintillaWrapper::ConvertEOLs, "Convert all line endings in the document to one mode.")
		.def("GetEOLMode", &ScintillaWrapper::GetEOLMode, "Retrieve the current end of line mode - one of CRLF, CR, or LF.")
		.def("SetEOLMode", &ScintillaWrapper::SetEOLMode, "Set the current end of line mode.")
		.def("StartStyling", &ScintillaWrapper::StartStyling, "Set the current styling position to pos and the styling mask to mask.\nThe styling mask can be used to protect some bits in each styling byte from modification.")
		.def("SetStyling", &ScintillaWrapper::SetStyling, "Change style from current styling position for length characters to a style\nand move the current styling position to after this newly styled segment.")
		.def("GetBufferedDraw", &ScintillaWrapper::GetBufferedDraw, "Is drawing done first into a buffer or direct to the screen?")
		.def("SetBufferedDraw", &ScintillaWrapper::SetBufferedDraw, "If drawing is buffered then each line of text is drawn into a bitmap buffer\nbefore drawing it to the screen to avoid flicker.")
		.def("SetTabWidth", &ScintillaWrapper::SetTabWidth, "Change the visible size of a tab to be a multiple of the width of a space character.")
		.def("GetTabWidth", &ScintillaWrapper::GetTabWidth, "Retrieve the visible size of a tab.")
		.def("SetCodePage", &ScintillaWrapper::SetCodePage, "Set the code page used to interpret the bytes of the document as characters.\nThe SC_CP_UTF8 value can be used to enter Unicode mode.")
		.def("SetUsePalette", &ScintillaWrapper::SetUsePalette, "In palette mode, Scintilla uses the environment's palette calls to display\nmore colours. This may lead to ugly displays.")
		.def("MarkerDefine", &ScintillaWrapper::MarkerDefine, "Set the symbol used for a particular marker number.")
		.def("MarkerSetFore", &ScintillaWrapper::MarkerSetFore, "Set the foreground colour used for a particular marker number.")
		.def("MarkerSetBack", &ScintillaWrapper::MarkerSetBack, "Set the background colour used for a particular marker number.")
		.def("MarkerAdd", &ScintillaWrapper::MarkerAdd, "Add a marker to a line, returning an ID which can be used to find or delete the marker.")
		.def("MarkerDelete", &ScintillaWrapper::MarkerDelete, "Delete a marker from a line.")
		.def("MarkerDeleteAll", &ScintillaWrapper::MarkerDeleteAll, "Delete all markers with a particular number from all lines.")
		.def("MarkerGet", &ScintillaWrapper::MarkerGet, "Get a bit mask of all the markers set on a line.")
		.def("MarkerNext", &ScintillaWrapper::MarkerNext, "Find the next line after lineStart that includes a marker in mask.")
		.def("MarkerPrevious", &ScintillaWrapper::MarkerPrevious, "Find the previous line before lineStart that includes a marker in mask.")
		.def("MarkerDefinePixmap", &ScintillaWrapper::MarkerDefinePixmap, "Define a marker from a pixmap.")
		.def("MarkerAddSet", &ScintillaWrapper::MarkerAddSet, "Add a set of markers to a line.")
		.def("MarkerSetAlpha", &ScintillaWrapper::MarkerSetAlpha, "Set the alpha used for a marker that is drawn in the text area, not the margin.")
		.def("SetMarginTypeN", &ScintillaWrapper::SetMarginTypeN, "Set a margin to be either numeric or symbolic.")
		.def("GetMarginTypeN", &ScintillaWrapper::GetMarginTypeN, "Retrieve the type of a margin.")
		.def("SetMarginWidthN", &ScintillaWrapper::SetMarginWidthN, "Set the width of a margin to a width expressed in pixels.")
		.def("GetMarginWidthN", &ScintillaWrapper::GetMarginWidthN, "Retrieve the width of a margin in pixels.")
		.def("SetMarginMaskN", &ScintillaWrapper::SetMarginMaskN, "Set a mask that determines which markers are displayed in a margin.")
		.def("GetMarginMaskN", &ScintillaWrapper::GetMarginMaskN, "Retrieve the marker mask of a margin.")
		.def("SetMarginSensitiveN", &ScintillaWrapper::SetMarginSensitiveN, "Make a margin sensitive or insensitive to mouse clicks.")
		.def("GetMarginSensitiveN", &ScintillaWrapper::GetMarginSensitiveN, "Retrieve the mouse click sensitivity of a margin.")
		.def("StyleClearAll", &ScintillaWrapper::StyleClearAll, "Clear all the styles and make equivalent to the global default style.")
		.def("StyleSetFore", &ScintillaWrapper::StyleSetFore, "Set the foreground colour of a style.")
		.def("StyleSetBack", &ScintillaWrapper::StyleSetBack, "Set the background colour of a style.")
		.def("StyleSetBold", &ScintillaWrapper::StyleSetBold, "Set a style to be bold or not.")
		.def("StyleSetItalic", &ScintillaWrapper::StyleSetItalic, "Set a style to be italic or not.")
		.def("StyleSetSize", &ScintillaWrapper::StyleSetSize, "Set the size of characters of a style.")
		.def("StyleSetFont", &ScintillaWrapper::StyleSetFont, "Set the font of a style.")
		.def("StyleSetEOLFilled", &ScintillaWrapper::StyleSetEOLFilled, "Set a style to have its end of line filled or not.")
		.def("StyleResetDefault", &ScintillaWrapper::StyleResetDefault, "Reset the default style to its state at startup")
		.def("StyleSetUnderline", &ScintillaWrapper::StyleSetUnderline, "Set a style to be underlined or not.")
		.def("StyleGetFore", &ScintillaWrapper::StyleGetFore, "Get the foreground colour of a style.")
		.def("StyleGetBack", &ScintillaWrapper::StyleGetBack, "Get the background colour of a style.")
		.def("StyleGetBold", &ScintillaWrapper::StyleGetBold, "Get is a style bold or not.")
		.def("StyleGetItalic", &ScintillaWrapper::StyleGetItalic, "Get is a style italic or not.")
		.def("StyleGetSize", &ScintillaWrapper::StyleGetSize, "Get the size of characters of a style.")
		.def("StyleGetFont", &ScintillaWrapper::StyleGetFont, "Get the font of a style.\nReturns the length of the fontName")
		.def("StyleGetEOLFilled", &ScintillaWrapper::StyleGetEOLFilled, "Get is a style to have its end of line filled or not.")
		.def("StyleGetUnderline", &ScintillaWrapper::StyleGetUnderline, "Get is a style underlined or not.")
		.def("StyleGetCase", &ScintillaWrapper::StyleGetCase, "Get is a style mixed case, or to force upper or lower case.")
		.def("StyleGetCharacterSet", &ScintillaWrapper::StyleGetCharacterSet, "Get the character get of the font in a style.")
		.def("StyleGetVisible", &ScintillaWrapper::StyleGetVisible, "Get is a style visible or not.")
		.def("StyleGetChangeable", &ScintillaWrapper::StyleGetChangeable, "Get is a style changeable or not (read only).\nExperimental feature, currently buggy.")
		.def("StyleGetHotSpot", &ScintillaWrapper::StyleGetHotSpot, "Get is a style a hotspot or not.")
		.def("StyleSetCase", &ScintillaWrapper::StyleSetCase, "Set a style to be mixed case, or to force upper or lower case.")
		.def("StyleSetCharacterSet", &ScintillaWrapper::StyleSetCharacterSet, "Set the character set of the font in a style.")
		.def("StyleSetHotSpot", &ScintillaWrapper::StyleSetHotSpot, "Set a style to be a hotspot or not.")
		.def("SetSelFore", &ScintillaWrapper::SetSelFore, "Set the foreground colour of the main and additional selections and whether to use this setting.")
		.def("SetSelBack", &ScintillaWrapper::SetSelBack, "Set the background colour of the main and additional selections and whether to use this setting.")
		.def("GetSelAlpha", &ScintillaWrapper::GetSelAlpha, "Get the alpha of the selection.")
		.def("SetSelAlpha", &ScintillaWrapper::SetSelAlpha, "Set the alpha of the selection.")
		.def("GetSelEOLFilled", &ScintillaWrapper::GetSelEOLFilled, "Is the selection end of line filled?")
		.def("SetSelEOLFilled", &ScintillaWrapper::SetSelEOLFilled, "Set the selection to have its end of line filled or not.")
		.def("SetCaretFore", &ScintillaWrapper::SetCaretFore, "Set the foreground colour of the caret.")
		.def("AssignCmdKey", &ScintillaWrapper::AssignCmdKey, "When key+modifier combination km is pressed perform msg.")
		.def("ClearCmdKey", &ScintillaWrapper::ClearCmdKey, "When key+modifier combination km is pressed do nothing.")
		.def("ClearAllCmdKeys", &ScintillaWrapper::ClearAllCmdKeys, "Drop all key mappings.")
		.def("SetStylingEx", &ScintillaWrapper::SetStylingEx, "Set the styles for a segment of the document.")
		.def("StyleSetVisible", &ScintillaWrapper::StyleSetVisible, "Set a style to be visible or not.")
		.def("GetCaretPeriod", &ScintillaWrapper::GetCaretPeriod, "Get the time in milliseconds that the caret is on and off.")
		.def("SetCaretPeriod", &ScintillaWrapper::SetCaretPeriod, "Get the time in milliseconds that the caret is on and off. 0 = steady on.")
		.def("SetWordChars", &ScintillaWrapper::SetWordChars, "Set the set of characters making up words for when moving or selecting by word.\nFirst sets defaults like SetCharsDefault.")
		.def("BeginUndoAction", &ScintillaWrapper::BeginUndoAction, "Start a sequence of actions that is undone and redone as a unit.\nMay be nested.")
		.def("EndUndoAction", &ScintillaWrapper::EndUndoAction, "End a sequence of actions that is undone and redone as a unit.")
		.def("IndicSetStyle", &ScintillaWrapper::IndicSetStyle, "Set an indicator to plain, squiggle or TT.")
		.def("IndicGetStyle", &ScintillaWrapper::IndicGetStyle, "Retrieve the style of an indicator.")
		.def("IndicSetFore", &ScintillaWrapper::IndicSetFore, "Set the foreground colour of an indicator.")
		.def("IndicGetFore", &ScintillaWrapper::IndicGetFore, "Retrieve the foreground colour of an indicator.")
		.def("IndicSetUnder", &ScintillaWrapper::IndicSetUnder, "Set an indicator to draw under text or over(default).")
		.def("IndicGetUnder", &ScintillaWrapper::IndicGetUnder, "Retrieve whether indicator drawn under or over text.")
		.def("SetWhitespaceFore", &ScintillaWrapper::SetWhitespaceFore, "Set the foreground colour of all whitespace and whether to use this setting.")
		.def("SetWhitespaceBack", &ScintillaWrapper::SetWhitespaceBack, "Set the background colour of all whitespace and whether to use this setting.")
		.def("SetWhitespaceSize", &ScintillaWrapper::SetWhitespaceSize, "Set the size of the dots used to mark space characters.")
		.def("GetWhitespaceSize", &ScintillaWrapper::GetWhitespaceSize, "Get the size of the dots used to mark space characters.")
		.def("SetStyleBits", &ScintillaWrapper::SetStyleBits, "Divide each styling byte into lexical class bits (default: 5) and indicator\nbits (default: 3). If a lexer requires more than 32 lexical states, then this\nis used to expand the possible states.")
		.def("GetStyleBits", &ScintillaWrapper::GetStyleBits, "Retrieve number of bits in style bytes used to hold the lexical state.")
		.def("SetLineState", &ScintillaWrapper::SetLineState, "Used to hold extra styling information for each line.")
		.def("GetLineState", &ScintillaWrapper::GetLineState, "Retrieve the extra styling information for a line.")
		.def("GetMaxLineState", &ScintillaWrapper::GetMaxLineState, "Retrieve the last line number that has line state.")
		.def("GetCaretLineVisible", &ScintillaWrapper::GetCaretLineVisible, "Is the background of the line containing the caret in a different colour?")
		.def("SetCaretLineVisible", &ScintillaWrapper::SetCaretLineVisible, "Display the background of the line containing the caret in a different colour.")
		.def("GetCaretLineBack", &ScintillaWrapper::GetCaretLineBack, "Get the colour of the background of the line containing the caret.")
		.def("SetCaretLineBack", &ScintillaWrapper::SetCaretLineBack, "Set the colour of the background of the line containing the caret.")
		.def("StyleSetChangeable", &ScintillaWrapper::StyleSetChangeable, "Set a style to be changeable or not (read only).\nExperimental feature, currently buggy.")
		.def("AutoCShow", &ScintillaWrapper::AutoCShow, "Display a auto-completion list.\nThe lenEntered parameter indicates how many characters before\nthe caret should be used to provide context.")
		.def("AutoCCancel", &ScintillaWrapper::AutoCCancel, "Remove the auto-completion list from the screen.")
		.def("AutoCActive", &ScintillaWrapper::AutoCActive, "Is there an auto-completion list visible?")
		.def("AutoCPosStart", &ScintillaWrapper::AutoCPosStart, "Retrieve the position of the caret when the auto-completion list was displayed.")
		.def("AutoCComplete", &ScintillaWrapper::AutoCComplete, "User has selected an item so remove the list and insert the selection.")
		.def("AutoCStops", &ScintillaWrapper::AutoCStops, "Define a set of character that when typed cancel the auto-completion list.")
		.def("AutoCSetSeparator", &ScintillaWrapper::AutoCSetSeparator, "Change the separator character in the string setting up an auto-completion list.\nDefault is space but can be changed if items contain space.")
		.def("AutoCGetSeparator", &ScintillaWrapper::AutoCGetSeparator, "Retrieve the auto-completion list separator character.")
		.def("AutoCSelect", &ScintillaWrapper::AutoCSelect, "Select the item in the auto-completion list that starts with a string.")
		.def("AutoCSetCancelAtStart", &ScintillaWrapper::AutoCSetCancelAtStart, "Should the auto-completion list be cancelled if the user backspaces to a\nposition before where the box was created.")
		.def("AutoCGetCancelAtStart", &ScintillaWrapper::AutoCGetCancelAtStart, "Retrieve whether auto-completion cancelled by backspacing before start.")
		.def("AutoCSetFillUps", &ScintillaWrapper::AutoCSetFillUps, "Define a set of characters that when typed will cause the autocompletion to\nchoose the selected item.")
		.def("AutoCSetChooseSingle", &ScintillaWrapper::AutoCSetChooseSingle, "Should a single item auto-completion list automatically choose the item.")
		.def("AutoCGetChooseSingle", &ScintillaWrapper::AutoCGetChooseSingle, "Retrieve whether a single item auto-completion list automatically choose the item.")
		.def("AutoCSetIgnoreCase", &ScintillaWrapper::AutoCSetIgnoreCase, "Set whether case is significant when performing auto-completion searches.")
		.def("AutoCGetIgnoreCase", &ScintillaWrapper::AutoCGetIgnoreCase, "Retrieve state of ignore case flag.")
		.def("UserListShow", &ScintillaWrapper::UserListShow, "Display a list of strings and send notification when user chooses one.")
		.def("AutoCSetAutoHide", &ScintillaWrapper::AutoCSetAutoHide, "Set whether or not autocompletion is hidden automatically when nothing matches.")
		.def("AutoCGetAutoHide", &ScintillaWrapper::AutoCGetAutoHide, "Retrieve whether or not autocompletion is hidden automatically when nothing matches.")
		.def("AutoCSetDropRestOfWord", &ScintillaWrapper::AutoCSetDropRestOfWord, "Set whether or not autocompletion deletes any word characters\nafter the inserted text upon completion.")
		.def("AutoCGetDropRestOfWord", &ScintillaWrapper::AutoCGetDropRestOfWord, "Retrieve whether or not autocompletion deletes any word characters\nafter the inserted text upon completion.")
		.def("RegisterImage", &ScintillaWrapper::RegisterImage, "Register an XPM image for use in autocompletion lists.")
		.def("ClearRegisteredImages", &ScintillaWrapper::ClearRegisteredImages, "Clear all the registered XPM images.")
		.def("AutoCGetTypeSeparator", &ScintillaWrapper::AutoCGetTypeSeparator, "Retrieve the auto-completion list type-separator character.")
		.def("AutoCSetTypeSeparator", &ScintillaWrapper::AutoCSetTypeSeparator, "Change the type-separator character in the string setting up an auto-completion list.\nDefault is '?' but can be changed if items contain '?'.")
		.def("AutoCSetMaxWidth", &ScintillaWrapper::AutoCSetMaxWidth, "Set the maximum width, in characters, of auto-completion and user lists.\nSet to 0 to autosize to fit longest item, which is the default.")
		.def("AutoCGetMaxWidth", &ScintillaWrapper::AutoCGetMaxWidth, "Get the maximum width, in characters, of auto-completion and user lists.")
		.def("AutoCSetMaxHeight", &ScintillaWrapper::AutoCSetMaxHeight, "Set the maximum height, in rows, of auto-completion and user lists.\nThe default is 5 rows.")
		.def("AutoCGetMaxHeight", &ScintillaWrapper::AutoCGetMaxHeight, "Set the maximum height, in rows, of auto-completion and user lists.")
		.def("SetIndent", &ScintillaWrapper::SetIndent, "Set the number of spaces used for one level of indentation.")
		.def("GetIndent", &ScintillaWrapper::GetIndent, "Retrieve indentation size.")
		.def("SetUseTabs", &ScintillaWrapper::SetUseTabs, "Indentation will only use space characters if useTabs is false, otherwise\nit will use a combination of tabs and spaces.")
		.def("GetUseTabs", &ScintillaWrapper::GetUseTabs, "Retrieve whether tabs will be used in indentation.")
		.def("SetLineIndentation", &ScintillaWrapper::SetLineIndentation, "Change the indentation of a line to a number of columns.")
		.def("GetLineIndentation", &ScintillaWrapper::GetLineIndentation, "Retrieve the number of columns that a line is indented.")
		.def("GetLineIndentPosition", &ScintillaWrapper::GetLineIndentPosition, "Retrieve the position before the first non indentation character on a line.")
		.def("GetColumn", &ScintillaWrapper::GetColumn, "Retrieve the column number of a position, taking tab width into account.")
		.def("SetHScrollBar", &ScintillaWrapper::SetHScrollBar, "Show or hide the horizontal scroll bar.")
		.def("GetHScrollBar", &ScintillaWrapper::GetHScrollBar, "Is the horizontal scroll bar visible?")
		.def("SetIndentationGuides", &ScintillaWrapper::SetIndentationGuides, "Show or hide indentation guides.")
		.def("GetIndentationGuides", &ScintillaWrapper::GetIndentationGuides, "Are the indentation guides visible?")
		.def("SetHighlightGuide", &ScintillaWrapper::SetHighlightGuide, "Set the highlighted indentation guide column.\n0 = no highlighted guide.")
		.def("GetHighlightGuide", &ScintillaWrapper::GetHighlightGuide, "Get the highlighted indentation guide column.")
		.def("GetLineEndPosition", &ScintillaWrapper::GetLineEndPosition, "Get the position after the last visible characters on a line.")
		.def("GetCodePage", &ScintillaWrapper::GetCodePage, "Get the code page used to interpret the bytes of the document as characters.")
		.def("GetCaretFore", &ScintillaWrapper::GetCaretFore, "Get the foreground colour of the caret.")
		.def("GetUsePalette", &ScintillaWrapper::GetUsePalette, "In palette mode?")
		.def("GetReadOnly", &ScintillaWrapper::GetReadOnly, "In read-only mode?")
		.def("SetCurrentPos", &ScintillaWrapper::SetCurrentPos, "Sets the position of the caret.")
		.def("SetSelectionStart", &ScintillaWrapper::SetSelectionStart, "Sets the position that starts the selection - this becomes the anchor.")
		.def("GetSelectionStart", &ScintillaWrapper::GetSelectionStart, "Returns the position at the start of the selection.")
		.def("SetSelectionEnd", &ScintillaWrapper::SetSelectionEnd, "Sets the position that ends the selection - this becomes the currentPosition.")
		.def("GetSelectionEnd", &ScintillaWrapper::GetSelectionEnd, "Returns the position at the end of the selection.")
		.def("SetPrintMagnification", &ScintillaWrapper::SetPrintMagnification, "Sets the print magnification added to the point size of each style for printing.")
		.def("GetPrintMagnification", &ScintillaWrapper::GetPrintMagnification, "Returns the print magnification.")
		.def("SetPrintColourMode", &ScintillaWrapper::SetPrintColourMode, "Modify colours when printing for clearer printed text.")
		.def("GetPrintColourMode", &ScintillaWrapper::GetPrintColourMode, "Returns the print colour mode.")
		.def("FindText", &ScintillaWrapper::FindText, "Find some text in the document.")
		.def("GetFirstVisibleLine", &ScintillaWrapper::GetFirstVisibleLine, "Retrieve the display line at the top of the display.")
		.def("GetLine", &ScintillaWrapper::GetLine, "Retrieve the contents of a line.\nReturns the length of the line.")
		.def("GetLineCount", &ScintillaWrapper::GetLineCount, "Returns the number of lines in the document. There is always at least one.")
		.def("SetMarginLeft", &ScintillaWrapper::SetMarginLeft, "Sets the size in pixels of the left margin.")
		.def("GetMarginLeft", &ScintillaWrapper::GetMarginLeft, "Returns the size in pixels of the left margin.")
		.def("SetMarginRight", &ScintillaWrapper::SetMarginRight, "Sets the size in pixels of the right margin.")
		.def("GetMarginRight", &ScintillaWrapper::GetMarginRight, "Returns the size in pixels of the right margin.")
		.def("GetModify", &ScintillaWrapper::GetModify, "Is the document different from when it was last saved?")
		.def("SetSel", &ScintillaWrapper::SetSel, "Select a range of text.")
		.def("GetSelText", &ScintillaWrapper::GetSelText, "Retrieve the selected text.\nReturn the length of the text.")
		.def("GetTextRange", &ScintillaWrapper::GetTextRange, "Retrieve a range of text.\nReturn the length of the text.")
		.def("HideSelection", &ScintillaWrapper::HideSelection, "Draw the selection in normal style or with selection highlighted.")
		.def("PointXFromPosition", &ScintillaWrapper::PointXFromPosition, "Retrieve the x value of the point in the window where a position is displayed.")
		.def("PointYFromPosition", &ScintillaWrapper::PointYFromPosition, "Retrieve the y value of the point in the window where a position is displayed.")
		.def("LineFromPosition", &ScintillaWrapper::LineFromPosition, "Retrieve the line containing a position.")
		.def("PositionFromLine", &ScintillaWrapper::PositionFromLine, "Retrieve the position at the start of a line.")
		.def("LineScroll", &ScintillaWrapper::LineScroll, "Scroll horizontally and vertically.")
		.def("ScrollCaret", &ScintillaWrapper::ScrollCaret, "Ensure the caret is visible.")
		.def("ReplaceSel", &ScintillaWrapper::ReplaceSel, "Replace the selected text with the argument text.")
		.def("SetReadOnly", &ScintillaWrapper::SetReadOnly, "Set to read only or read write.")
		.def("Null", &ScintillaWrapper::Null, "Null operation.")
		.def("CanPaste", &ScintillaWrapper::CanPaste, "Will a paste succeed?")
		.def("CanUndo", &ScintillaWrapper::CanUndo, "Are there any undoable actions in the undo history?")
		.def("EmptyUndoBuffer", &ScintillaWrapper::EmptyUndoBuffer, "Delete the undo history.")
		.def("Undo", &ScintillaWrapper::Undo, "Undo one action in the undo history.")
		.def("Cut", &ScintillaWrapper::Cut, "Cut the selection to the clipboard.")
		.def("Copy", &ScintillaWrapper::Copy, "Copy the selection to the clipboard.")
		.def("Paste", &ScintillaWrapper::Paste, "Paste the contents of the clipboard into the document replacing the selection.")
		.def("Clear", &ScintillaWrapper::Clear, "Clear the selection.")
		.def("SetText", &ScintillaWrapper::SetText, "Replace the contents of the document with the argument text.")
		.def("GetText", &ScintillaWrapper::GetText, "Retrieve all the text in the document.\nReturns number of characters retrieved.")
		.def("GetTextLength", &ScintillaWrapper::GetTextLength, "Retrieve the number of characters in the document.")
		.def("GetDirectFunction", &ScintillaWrapper::GetDirectFunction, "Retrieve a pointer to a function that processes messages for this Scintilla.")
		.def("GetDirectPointer", &ScintillaWrapper::GetDirectPointer, "Retrieve a pointer value to use as the first argument when calling\nthe function returned by GetDirectFunction.")
		.def("SetOvertype", &ScintillaWrapper::SetOvertype, "Set to overtype (true) or insert mode.")
		.def("GetOvertype", &ScintillaWrapper::GetOvertype, "Returns true if overtype mode is active otherwise false is returned.")
		.def("SetCaretWidth", &ScintillaWrapper::SetCaretWidth, "Set the width of the insert mode caret.")
		.def("GetCaretWidth", &ScintillaWrapper::GetCaretWidth, "Returns the width of the insert mode caret.")
		.def("SetTargetStart", &ScintillaWrapper::SetTargetStart, "Sets the position that starts the target which is used for updating the\ndocument without affecting the scroll position.")
		.def("GetTargetStart", &ScintillaWrapper::GetTargetStart, "Get the position that starts the target.")
		.def("SetTargetEnd", &ScintillaWrapper::SetTargetEnd, "Sets the position that ends the target which is used for updating the\ndocument without affecting the scroll position.")
		.def("GetTargetEnd", &ScintillaWrapper::GetTargetEnd, "Get the position that ends the target.")
		.def("ReplaceTarget", &ScintillaWrapper::ReplaceTarget, "Replace the target text with the argument text.\nText is counted so it can contain NULs.\nReturns the length of the replacement text.")
		.def("ReplaceTargetRE", &ScintillaWrapper::ReplaceTargetRE, "Replace the target text with the argument text after \d processing.\nText is counted so it can contain NULs.\nLooks for \d where d is between 1 and 9 and replaces these with the strings\nmatched in the last search operation which were surrounded by \( and \).\nReturns the length of the replacement text including any change\ncaused by processing the \d patterns.")
		.def("SearchInTarget", &ScintillaWrapper::SearchInTarget, "Search for a counted string in the target and set the target to the found\nrange. Text is counted so it can contain NULs.\nReturns length of range or -1 for failure in which case target is not moved.")
		.def("SetSearchFlags", &ScintillaWrapper::SetSearchFlags, "Set the search flags used by SearchInTarget.")
		.def("GetSearchFlags", &ScintillaWrapper::GetSearchFlags, "Get the search flags used by SearchInTarget.")
		.def("CallTipShow", &ScintillaWrapper::CallTipShow, "Show a call tip containing a definition near position pos.")
		.def("CallTipCancel", &ScintillaWrapper::CallTipCancel, "Remove the call tip from the screen.")
		.def("CallTipActive", &ScintillaWrapper::CallTipActive, "Is there an active call tip?")
		.def("CallTipPosStart", &ScintillaWrapper::CallTipPosStart, "Retrieve the position where the caret was before displaying the call tip.")
		.def("CallTipSetHlt", &ScintillaWrapper::CallTipSetHlt, "Highlight a segment of the definition.")
		.def("CallTipSetBack", &ScintillaWrapper::CallTipSetBack, "Set the background colour for the call tip.")
		.def("CallTipSetFore", &ScintillaWrapper::CallTipSetFore, "Set the foreground colour for the call tip.")
		.def("CallTipSetForeHlt", &ScintillaWrapper::CallTipSetForeHlt, "Set the foreground colour for the highlighted part of the call tip.")
		.def("CallTipUseStyle", &ScintillaWrapper::CallTipUseStyle, "Enable use of STYLE_CALLTIP and set call tip tab size in pixels.")
		.def("VisibleFromDocLine", &ScintillaWrapper::VisibleFromDocLine, "Find the display line of a document line taking hidden lines into account.")
		.def("DocLineFromVisible", &ScintillaWrapper::DocLineFromVisible, "Find the document line of a display line taking hidden lines into account.")
		.def("WrapCount", &ScintillaWrapper::WrapCount, "The number of display lines needed to wrap a document line")
		.def("SetFoldLevel", &ScintillaWrapper::SetFoldLevel, "Set the fold level of a line.\nThis encodes an integer level along with flags indicating whether the\nline is a header and whether it is effectively white space.")
		.def("GetFoldLevel", &ScintillaWrapper::GetFoldLevel, "Retrieve the fold level of a line.")
		.def("GetLastChild", &ScintillaWrapper::GetLastChild, "Find the last child line of a header line.")
		.def("GetFoldParent", &ScintillaWrapper::GetFoldParent, "Find the parent line of a child line.")
		.def("ShowLines", &ScintillaWrapper::ShowLines, "Make a range of lines visible.")
		.def("HideLines", &ScintillaWrapper::HideLines, "Make a range of lines invisible.")
		.def("GetLineVisible", &ScintillaWrapper::GetLineVisible, "Is a line visible?")
		.def("SetFoldExpanded", &ScintillaWrapper::SetFoldExpanded, "Show the children of a header line.")
		.def("GetFoldExpanded", &ScintillaWrapper::GetFoldExpanded, "Is a header line expanded?")
		.def("ToggleFold", &ScintillaWrapper::ToggleFold, "Switch a header line between expanded and contracted.")
		.def("EnsureVisible", &ScintillaWrapper::EnsureVisible, "Ensure a particular line is visible by expanding any header line hiding it.")
		.def("SetFoldFlags", &ScintillaWrapper::SetFoldFlags, "Set some style options for folding.")
		.def("EnsureVisibleEnforcePolicy", &ScintillaWrapper::EnsureVisibleEnforcePolicy, "Ensure a particular line is visible by expanding any header line hiding it.\nUse the currently set visibility policy to determine which range to display.")
		.def("SetTabIndents", &ScintillaWrapper::SetTabIndents, "Sets whether a tab pressed when caret is within indentation indents.")
		.def("GetTabIndents", &ScintillaWrapper::GetTabIndents, "Does a tab pressed when caret is within indentation indent?")
		.def("SetBackSpaceUnIndents", &ScintillaWrapper::SetBackSpaceUnIndents, "Sets whether a backspace pressed when caret is within indentation unindents.")
		.def("GetBackSpaceUnIndents", &ScintillaWrapper::GetBackSpaceUnIndents, "Does a backspace pressed when caret is within indentation unindent?")
		.def("SetMouseDwellTime", &ScintillaWrapper::SetMouseDwellTime, "Sets the time the mouse must sit still to generate a mouse dwell event.")
		.def("GetMouseDwellTime", &ScintillaWrapper::GetMouseDwellTime, "Retrieve the time the mouse must sit still to generate a mouse dwell event.")
		.def("WordStartPosition", &ScintillaWrapper::WordStartPosition, "Get position of start of word.")
		.def("WordEndPosition", &ScintillaWrapper::WordEndPosition, "Get position of end of word.")
		.def("SetWrapMode", &ScintillaWrapper::SetWrapMode, "Sets whether text is word wrapped.")
		.def("GetWrapMode", &ScintillaWrapper::GetWrapMode, "Retrieve whether text is word wrapped.")
		.def("SetWrapVisualFlags", &ScintillaWrapper::SetWrapVisualFlags, "Set the display mode of visual flags for wrapped lines.")
		.def("GetWrapVisualFlags", &ScintillaWrapper::GetWrapVisualFlags, "Retrive the display mode of visual flags for wrapped lines.")
		.def("SetWrapVisualFlagsLocation", &ScintillaWrapper::SetWrapVisualFlagsLocation, "Set the location of visual flags for wrapped lines.")
		.def("GetWrapVisualFlagsLocation", &ScintillaWrapper::GetWrapVisualFlagsLocation, "Retrive the location of visual flags for wrapped lines.")
		.def("SetWrapStartIndent", &ScintillaWrapper::SetWrapStartIndent, "Set the start indent for wrapped lines.")
		.def("GetWrapStartIndent", &ScintillaWrapper::GetWrapStartIndent, "Retrive the start indent for wrapped lines.")
		.def("SetWrapIndentMode", &ScintillaWrapper::SetWrapIndentMode, "Sets how wrapped sublines are placed. Default is fixed.")
		.def("GetWrapIndentMode", &ScintillaWrapper::GetWrapIndentMode, "Retrieve how wrapped sublines are placed. Default is fixed.")
		.def("SetLayoutCache", &ScintillaWrapper::SetLayoutCache, "Sets the degree of caching of layout information.")
		.def("GetLayoutCache", &ScintillaWrapper::GetLayoutCache, "Retrieve the degree of caching of layout information.")
		.def("SetScrollWidth", &ScintillaWrapper::SetScrollWidth, "Sets the document width assumed for scrolling.")
		.def("GetScrollWidth", &ScintillaWrapper::GetScrollWidth, "Retrieve the document width assumed for scrolling.")
		.def("SetScrollWidthTracking", &ScintillaWrapper::SetScrollWidthTracking, "Sets whether the maximum width line displayed is used to set scroll width.")
		.def("GetScrollWidthTracking", &ScintillaWrapper::GetScrollWidthTracking, "Retrieve whether the scroll width tracks wide lines.")
		.def("TextWidth", &ScintillaWrapper::TextWidth, "Measure the pixel width of some text in a particular style.\nNUL terminated text argument.\nDoes not handle tab or control characters.")
		.def("SetEndAtLastLine", &ScintillaWrapper::SetEndAtLastLine, "Sets the scroll range so that maximum scroll position has\nthe last line at the bottom of the view (default).\nSetting this to false allows scrolling one page below the last line.")
		.def("GetEndAtLastLine", &ScintillaWrapper::GetEndAtLastLine, "Retrieve whether the maximum scroll position has the last\nline at the bottom of the view.")
		.def("TextHeight", &ScintillaWrapper::TextHeight, "Retrieve the height of a particular line of text in pixels.")
		.def("SetVScrollBar", &ScintillaWrapper::SetVScrollBar, "Show or hide the vertical scroll bar.")
		.def("GetVScrollBar", &ScintillaWrapper::GetVScrollBar, "Is the vertical scroll bar visible?")
		.def("AppendText", &ScintillaWrapper::AppendText, "Append a string to the end of the document without changing the selection.")
		.def("GetTwoPhaseDraw", &ScintillaWrapper::GetTwoPhaseDraw, "Is drawing done in two phases with backgrounds drawn before faoregrounds?")
		.def("SetTwoPhaseDraw", &ScintillaWrapper::SetTwoPhaseDraw, "In twoPhaseDraw mode, drawing is performed in two phases, first the background\nand then the foreground. This avoids chopping off characters that overlap the next run.")
		.def("SetFontQuality", &ScintillaWrapper::SetFontQuality, "Choose the quality level for text from the FontQuality enumeration.")
		.def("GetFontQuality", &ScintillaWrapper::GetFontQuality, "Retrieve the quality level for text.")
		.def("SetFirstVisibleLine", &ScintillaWrapper::SetFirstVisibleLine, "Scroll so that a display line is at the top of the display.")
		.def("SetMultiPaste", &ScintillaWrapper::SetMultiPaste, "Change the effect of pasting when there are multiple selections.")
		.def("GetMultiPaste", &ScintillaWrapper::GetMultiPaste, "Retrieve the effect of pasting when there are multiple selections..")
		.def("GetTag", &ScintillaWrapper::GetTag, "Retrieve the value of a tag from a regular expression search.")
		.def("TargetFromSelection", &ScintillaWrapper::TargetFromSelection, "Make the target range start and end be the same as the selection range start and end.")
		.def("LinesJoin", &ScintillaWrapper::LinesJoin, "Join the lines in the target.")
		.def("LinesSplit", &ScintillaWrapper::LinesSplit, "Split the lines in the target into lines that are less wide than pixelWidth\nwhere possible.")
		.def("SetFoldMarginColour", &ScintillaWrapper::SetFoldMarginColour, "Set the colours used as a chequerboard pattern in the fold margin")
		.def("SetFoldMarginHiColour", &ScintillaWrapper::SetFoldMarginHiColour, "Set the colours used as a chequerboard pattern in the fold margin")
		.def("LineDown", &ScintillaWrapper::LineDown, "Move caret down one line.")
		.def("LineDownExtend", &ScintillaWrapper::LineDownExtend, "Move caret down one line extending selection to new caret position.")
		.def("LineUp", &ScintillaWrapper::LineUp, "Move caret up one line.")
		.def("LineUpExtend", &ScintillaWrapper::LineUpExtend, "Move caret up one line extending selection to new caret position.")
		.def("CharLeft", &ScintillaWrapper::CharLeft, "Move caret left one character.")
		.def("CharLeftExtend", &ScintillaWrapper::CharLeftExtend, "Move caret left one character extending selection to new caret position.")
		.def("CharRight", &ScintillaWrapper::CharRight, "Move caret right one character.")
		.def("CharRightExtend", &ScintillaWrapper::CharRightExtend, "Move caret right one character extending selection to new caret position.")
		.def("WordLeft", &ScintillaWrapper::WordLeft, "Move caret left one word.")
		.def("WordLeftExtend", &ScintillaWrapper::WordLeftExtend, "Move caret left one word extending selection to new caret position.")
		.def("WordRight", &ScintillaWrapper::WordRight, "Move caret right one word.")
		.def("WordRightExtend", &ScintillaWrapper::WordRightExtend, "Move caret right one word extending selection to new caret position.")
		.def("Home", &ScintillaWrapper::Home, "Move caret to first position on line.")
		.def("HomeExtend", &ScintillaWrapper::HomeExtend, "Move caret to first position on line extending selection to new caret position.")
		.def("LineEnd", &ScintillaWrapper::LineEnd, "Move caret to last position on line.")
		.def("LineEndExtend", &ScintillaWrapper::LineEndExtend, "Move caret to last position on line extending selection to new caret position.")
		.def("DocumentStart", &ScintillaWrapper::DocumentStart, "Move caret to first position in document.")
		.def("DocumentStartExtend", &ScintillaWrapper::DocumentStartExtend, "Move caret to first position in document extending selection to new caret position.")
		.def("DocumentEnd", &ScintillaWrapper::DocumentEnd, "Move caret to last position in document.")
		.def("DocumentEndExtend", &ScintillaWrapper::DocumentEndExtend, "Move caret to last position in document extending selection to new caret position.")
		.def("PageUp", &ScintillaWrapper::PageUp, "Move caret one page up.")
		.def("PageUpExtend", &ScintillaWrapper::PageUpExtend, "Move caret one page up extending selection to new caret position.")
		.def("PageDown", &ScintillaWrapper::PageDown, "Move caret one page down.")
		.def("PageDownExtend", &ScintillaWrapper::PageDownExtend, "Move caret one page down extending selection to new caret position.")
		.def("EditToggleOvertype", &ScintillaWrapper::EditToggleOvertype, "Switch from insert to overtype mode or the reverse.")
		.def("Cancel", &ScintillaWrapper::Cancel, "Cancel any modes such as call tip or auto-completion list display.")
		.def("DeleteBack", &ScintillaWrapper::DeleteBack, "Delete the selection or if no selection, the character before the caret.")
		.def("Tab", &ScintillaWrapper::Tab, "If selection is empty or all on one line replace the selection with a tab character.\nIf more than one line selected, indent the lines.")
		.def("BackTab", &ScintillaWrapper::BackTab, "Dedent the selected lines.")
		.def("NewLine", &ScintillaWrapper::NewLine, "Insert a new line, may use a CRLF, CR or LF depending on EOL mode.")
		.def("FormFeed", &ScintillaWrapper::FormFeed, "Insert a Form Feed character.")
		.def("VCHome", &ScintillaWrapper::VCHome, "Move caret to before first visible character on line.\nIf already there move to first character on line.")
		.def("VCHomeExtend", &ScintillaWrapper::VCHomeExtend, "Like VCHome but extending selection to new caret position.")
		.def("ZoomIn", &ScintillaWrapper::ZoomIn, "Magnify the displayed text by increasing the sizes by 1 point.")
		.def("ZoomOut", &ScintillaWrapper::ZoomOut, "Make the displayed text smaller by decreasing the sizes by 1 point.")
		.def("DelWordLeft", &ScintillaWrapper::DelWordLeft, "Delete the word to the left of the caret.")
		.def("DelWordRight", &ScintillaWrapper::DelWordRight, "Delete the word to the right of the caret.")
		.def("DelWordRightEnd", &ScintillaWrapper::DelWordRightEnd, "Delete the word to the right of the caret, but not the trailing non-word characters.")
		.def("LineCut", &ScintillaWrapper::LineCut, "Cut the line containing the caret.")
		.def("LineDelete", &ScintillaWrapper::LineDelete, "Delete the line containing the caret.")
		.def("LineTranspose", &ScintillaWrapper::LineTranspose, "Switch the current line with the previous.")
		.def("LineDuplicate", &ScintillaWrapper::LineDuplicate, "Duplicate the current line.")
		.def("LowerCase", &ScintillaWrapper::LowerCase, "Transform the selection to lower case.")
		.def("UpperCase", &ScintillaWrapper::UpperCase, "Transform the selection to upper case.")
		.def("LineScrollDown", &ScintillaWrapper::LineScrollDown, "Scroll the document down, keeping the caret visible.")
		.def("LineScrollUp", &ScintillaWrapper::LineScrollUp, "Scroll the document up, keeping the caret visible.")
		.def("DeleteBackNotLine", &ScintillaWrapper::DeleteBackNotLine, "Delete the selection or if no selection, the character before the caret.\nWill not delete the character before at the start of a line.")
		.def("HomeDisplay", &ScintillaWrapper::HomeDisplay, "Move caret to first position on display line.")
		.def("HomeDisplayExtend", &ScintillaWrapper::HomeDisplayExtend, "Move caret to first position on display line extending selection to\nnew caret position.")
		.def("LineEndDisplay", &ScintillaWrapper::LineEndDisplay, "Move caret to last position on display line.")
		.def("LineEndDisplayExtend", &ScintillaWrapper::LineEndDisplayExtend, "Move caret to last position on display line extending selection to new\ncaret position.")
		.def("HomeWrap", &ScintillaWrapper::HomeWrap, "These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?\nexcept they behave differently when word-wrap is enabled:\nThey go first to the start / end of the display line, like (Home|LineEnd)Display\nThe difference is that, the cursor is already at the point, it goes on to the start\nor end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.")
		.def("HomeWrapExtend", &ScintillaWrapper::HomeWrapExtend, "These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?\nexcept they behave differently when word-wrap is enabled:\nThey go first to the start / end of the display line, like (Home|LineEnd)Display\nThe difference is that, the cursor is already at the point, it goes on to the start\nor end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.")
		.def("LineEndWrap", &ScintillaWrapper::LineEndWrap, "These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?\nexcept they behave differently when word-wrap is enabled:\nThey go first to the start / end of the display line, like (Home|LineEnd)Display\nThe difference is that, the cursor is already at the point, it goes on to the start\nor end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.")
		.def("LineEndWrapExtend", &ScintillaWrapper::LineEndWrapExtend, "These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?\nexcept they behave differently when word-wrap is enabled:\nThey go first to the start / end of the display line, like (Home|LineEnd)Display\nThe difference is that, the cursor is already at the point, it goes on to the start\nor end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.")
		.def("VCHomeWrap", &ScintillaWrapper::VCHomeWrap, "These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?\nexcept they behave differently when word-wrap is enabled:\nThey go first to the start / end of the display line, like (Home|LineEnd)Display\nThe difference is that, the cursor is already at the point, it goes on to the start\nor end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.")
		.def("VCHomeWrapExtend", &ScintillaWrapper::VCHomeWrapExtend, "These are like their namesakes Home(Extend)?, LineEnd(Extend)?, VCHome(Extend)?\nexcept they behave differently when word-wrap is enabled:\nThey go first to the start / end of the display line, like (Home|LineEnd)Display\nThe difference is that, the cursor is already at the point, it goes on to the start\nor end of the document line, as appropriate for (Home|LineEnd|VCHome)(Extend)?.")
		.def("LineCopy", &ScintillaWrapper::LineCopy, "Copy the line containing the caret.")
		.def("MoveCaretInsideView", &ScintillaWrapper::MoveCaretInsideView, "Move the caret inside current view if it's not there already.")
		.def("LineLength", &ScintillaWrapper::LineLength, "How many characters are on a line, including end of line characters?")
		.def("BraceHighlight", &ScintillaWrapper::BraceHighlight, "Highlight the characters at two positions.")
		.def("BraceBadLight", &ScintillaWrapper::BraceBadLight, "Highlight the character at a position indicating there is no matching brace.")
		.def("BraceMatch", &ScintillaWrapper::BraceMatch, "Find the position of a matching brace or INVALID_POSITION if no match.")
		.def("GetViewEOL", &ScintillaWrapper::GetViewEOL, "Are the end of line characters visible?")
		.def("SetViewEOL", &ScintillaWrapper::SetViewEOL, "Make the end of line characters visible or invisible.")
		.def("GetDocPointer", &ScintillaWrapper::GetDocPointer, "Retrieve a pointer to the document object.")
		.def("SetDocPointer", &ScintillaWrapper::SetDocPointer, "Change the document object used.")
		.def("SetModEventMask", &ScintillaWrapper::SetModEventMask, "Set which document modification events are sent to the container.")
		.def("GetEdgeColumn", &ScintillaWrapper::GetEdgeColumn, "Retrieve the column number which text should be kept within.")
		.def("SetEdgeColumn", &ScintillaWrapper::SetEdgeColumn, "Set the column number of the edge.\nIf text goes past the edge then it is highlighted.")
		.def("GetEdgeMode", &ScintillaWrapper::GetEdgeMode, "Retrieve the edge highlight mode.")
		.def("SetEdgeMode", &ScintillaWrapper::SetEdgeMode, "The edge may be displayed by a line (EDGE_LINE) or by highlighting text that\ngoes beyond it (EDGE_BACKGROUND) or not displayed at all (EDGE_NONE).")
		.def("GetEdgeColour", &ScintillaWrapper::GetEdgeColour, "Retrieve the colour used in edge indication.")
		.def("SetEdgeColour", &ScintillaWrapper::SetEdgeColour, "Change the colour used in edge indication.")
		.def("SearchAnchor", &ScintillaWrapper::SearchAnchor, "Sets the current caret position to be the search anchor.")
		.def("SearchNext", &ScintillaWrapper::SearchNext, "Find some text starting at the search anchor.\nDoes not ensure the selection is visible.")
		.def("SearchPrev", &ScintillaWrapper::SearchPrev, "Find some text starting at the search anchor and moving backwards.\nDoes not ensure the selection is visible.")
		.def("LinesOnScreen", &ScintillaWrapper::LinesOnScreen, "Retrieves the number of lines completely visible.")
		.def("UsePopUp", &ScintillaWrapper::UsePopUp, "Set whether a pop up menu is displayed automatically when the user presses\nthe wrong mouse button.")
		.def("SelectionIsRectangle", &ScintillaWrapper::SelectionIsRectangle, "Is the selection rectangular? The alternative is the more common stream selection.")
		.def("SetZoom", &ScintillaWrapper::SetZoom, "Set the zoom level. This number of points is added to the size of all fonts.\nIt may be positive to magnify or negative to reduce.")
		.def("GetZoom", &ScintillaWrapper::GetZoom, "Retrieve the zoom level.")
		.def("CreateDocument", &ScintillaWrapper::CreateDocument, "Create a new document object.\nStarts with reference count of 1 and not selected into editor.")
		.def("AddRefDocument", &ScintillaWrapper::AddRefDocument, "Extend life of document.")
		.def("ReleaseDocument", &ScintillaWrapper::ReleaseDocument, "Release a reference to the document, deleting document if it fades to black.")
		.def("GetModEventMask", &ScintillaWrapper::GetModEventMask, "Get which document modification events are sent to the container.")
		.def("SetFocus", &ScintillaWrapper::SetFocus, "Change internal focus flag.")
		.def("GetFocus", &ScintillaWrapper::GetFocus, "Get internal focus flag.")
		.def("SetStatus", &ScintillaWrapper::SetStatus, "Change error status - 0 = OK.")
		.def("GetStatus", &ScintillaWrapper::GetStatus, "Get error status.")
		.def("SetMouseDownCaptures", &ScintillaWrapper::SetMouseDownCaptures, "Set whether the mouse is captured when its button is pressed.")
		.def("GetMouseDownCaptures", &ScintillaWrapper::GetMouseDownCaptures, "Get whether mouse gets captured.")
		.def("SetCursor", &ScintillaWrapper::SetCursor, "Sets the cursor to one of the SC_CURSOR* values.")
		.def("GetCursor", &ScintillaWrapper::GetCursor, "Get cursor type.")
		.def("SetControlCharSymbol", &ScintillaWrapper::SetControlCharSymbol, "Change the way control characters are displayed:\nIf symbol is < 32, keep the drawn way, else, use the given character.")
		.def("GetControlCharSymbol", &ScintillaWrapper::GetControlCharSymbol, "Get the way control characters are displayed.")
		.def("WordPartLeft", &ScintillaWrapper::WordPartLeft, "Move to the previous change in capitalisation.")
		.def("WordPartLeftExtend", &ScintillaWrapper::WordPartLeftExtend, "Move to the previous change in capitalisation extending selection\nto new caret position.")
		.def("WordPartRight", &ScintillaWrapper::WordPartRight, "Move to the change next in capitalisation.")
		.def("WordPartRightExtend", &ScintillaWrapper::WordPartRightExtend, "Move to the next change in capitalisation extending selection\nto new caret position.")
		.def("SetVisiblePolicy", &ScintillaWrapper::SetVisiblePolicy, "Set the way the display area is determined when a particular line\nis to be moved to by Find, FindNext, GotoLine, etc.")
		.def("DelLineLeft", &ScintillaWrapper::DelLineLeft, "Delete back from the current position to the start of the line.")
		.def("DelLineRight", &ScintillaWrapper::DelLineRight, "Delete forwards from the current position to the end of the line.")
		.def("SetXOffset", &ScintillaWrapper::SetXOffset, "Get and Set the xOffset (ie, horizonal scroll position).")
		.def("GetXOffset", &ScintillaWrapper::GetXOffset, "Get and Set the xOffset (ie, horizonal scroll position).")
		.def("ChooseCaretX", &ScintillaWrapper::ChooseCaretX, "Set the last x chosen value to be the caret x position.")
		.def("GrabFocus", &ScintillaWrapper::GrabFocus, "Set the focus to this Scintilla widget.")
		.def("SetXCaretPolicy", &ScintillaWrapper::SetXCaretPolicy, "Set the way the caret is kept visible when going sideway.\nThe exclusion zone is given in pixels.")
		.def("SetYCaretPolicy", &ScintillaWrapper::SetYCaretPolicy, "Set the way the line the caret is on is kept visible.\nThe exclusion zone is given in lines.")
		.def("SetPrintWrapMode", &ScintillaWrapper::SetPrintWrapMode, "Set printing to line wrapped (SC_WRAP_WORD) or not line wrapped (SC_WRAP_NONE).")
		.def("GetPrintWrapMode", &ScintillaWrapper::GetPrintWrapMode, "Is printing line wrapped?")
		.def("SetHotspotActiveFore", &ScintillaWrapper::SetHotspotActiveFore, "Set a fore colour for active hotspots.")
		.def("GetHotspotActiveFore", &ScintillaWrapper::GetHotspotActiveFore, "Get the fore colour for active hotspots.")
		.def("SetHotspotActiveBack", &ScintillaWrapper::SetHotspotActiveBack, "Set a back colour for active hotspots.")
		.def("GetHotspotActiveBack", &ScintillaWrapper::GetHotspotActiveBack, "Get the back colour for active hotspots.")
		.def("SetHotspotActiveUnderline", &ScintillaWrapper::SetHotspotActiveUnderline, "Enable / Disable underlining active hotspots.")
		.def("GetHotspotActiveUnderline", &ScintillaWrapper::GetHotspotActiveUnderline, "Get whether underlining for active hotspots.")
		.def("SetHotspotSingleLine", &ScintillaWrapper::SetHotspotSingleLine, "Limit hotspots to single line so hotspots on two lines don't merge.")
		.def("GetHotspotSingleLine", &ScintillaWrapper::GetHotspotSingleLine, "Get the HotspotSingleLine property")
		.def("ParaDown", &ScintillaWrapper::ParaDown, "Move caret between paragraphs (delimited by empty lines).")
		.def("ParaDownExtend", &ScintillaWrapper::ParaDownExtend, "Move caret between paragraphs (delimited by empty lines).")
		.def("ParaUp", &ScintillaWrapper::ParaUp, "Move caret between paragraphs (delimited by empty lines).")
		.def("ParaUpExtend", &ScintillaWrapper::ParaUpExtend, "Move caret between paragraphs (delimited by empty lines).")
		.def("PositionBefore", &ScintillaWrapper::PositionBefore, "Given a valid document position, return the previous position taking code\npage into account. Returns 0 if passed 0.")
		.def("PositionAfter", &ScintillaWrapper::PositionAfter, "Given a valid document position, return the next position taking code\npage into account. Maximum value returned is the last position in the document.")
		.def("CopyRange", &ScintillaWrapper::CopyRange, "Copy a range of text to the clipboard. Positions are clipped into the document.")
		.def("CopyText", &ScintillaWrapper::CopyText, "Copy argument text to the clipboard.")
		.def("SetSelectionMode", &ScintillaWrapper::SetSelectionMode, "Set the selection mode to stream (SC_SEL_STREAM) or rectangular (SC_SEL_RECTANGLE/SC_SEL_THIN) or\nby lines (SC_SEL_LINES).")
		.def("GetSelectionMode", &ScintillaWrapper::GetSelectionMode, "Get the mode of the current selection.")
		.def("GetLineSelStartPosition", &ScintillaWrapper::GetLineSelStartPosition, "Retrieve the position of the start of the selection at the given line (INVALID_POSITION if no selection on this line).")
		.def("GetLineSelEndPosition", &ScintillaWrapper::GetLineSelEndPosition, "Retrieve the position of the end of the selection at the given line (INVALID_POSITION if no selection on this line).")
		.def("LineDownRectExtend", &ScintillaWrapper::LineDownRectExtend, "Move caret down one line, extending rectangular selection to new caret position.")
		.def("LineUpRectExtend", &ScintillaWrapper::LineUpRectExtend, "Move caret up one line, extending rectangular selection to new caret position.")
		.def("CharLeftRectExtend", &ScintillaWrapper::CharLeftRectExtend, "Move caret left one character, extending rectangular selection to new caret position.")
		.def("CharRightRectExtend", &ScintillaWrapper::CharRightRectExtend, "Move caret right one character, extending rectangular selection to new caret position.")
		.def("HomeRectExtend", &ScintillaWrapper::HomeRectExtend, "Move caret to first position on line, extending rectangular selection to new caret position.")
		.def("VCHomeRectExtend", &ScintillaWrapper::VCHomeRectExtend, "Move caret to before first visible character on line.\nIf already there move to first character on line.\nIn either case, extend rectangular selection to new caret position.")
		.def("LineEndRectExtend", &ScintillaWrapper::LineEndRectExtend, "Move caret to last position on line, extending rectangular selection to new caret position.")
		.def("PageUpRectExtend", &ScintillaWrapper::PageUpRectExtend, "Move caret one page up, extending rectangular selection to new caret position.")
		.def("PageDownRectExtend", &ScintillaWrapper::PageDownRectExtend, "Move caret one page down, extending rectangular selection to new caret position.")
		.def("StutteredPageUp", &ScintillaWrapper::StutteredPageUp, "Move caret to top of page, or one page up if already at top of page.")
		.def("StutteredPageUpExtend", &ScintillaWrapper::StutteredPageUpExtend, "Move caret to top of page, or one page up if already at top of page, extending selection to new caret position.")
		.def("StutteredPageDown", &ScintillaWrapper::StutteredPageDown, "Move caret to bottom of page, or one page down if already at bottom of page.")
		.def("StutteredPageDownExtend", &ScintillaWrapper::StutteredPageDownExtend, "Move caret to bottom of page, or one page down if already at bottom of page, extending selection to new caret position.")
		.def("WordLeftEnd", &ScintillaWrapper::WordLeftEnd, "Move caret left one word, position cursor at end of word.")
		.def("WordLeftEndExtend", &ScintillaWrapper::WordLeftEndExtend, "Move caret left one word, position cursor at end of word, extending selection to new caret position.")
		.def("WordRightEnd", &ScintillaWrapper::WordRightEnd, "Move caret right one word, position cursor at end of word.")
		.def("WordRightEndExtend", &ScintillaWrapper::WordRightEndExtend, "Move caret right one word, position cursor at end of word, extending selection to new caret position.")
		.def("SetWhitespaceChars", &ScintillaWrapper::SetWhitespaceChars, "Set the set of characters making up whitespace for when moving or selecting by word.\nShould be called after SetWordChars.")
		.def("SetCharsDefault", &ScintillaWrapper::SetCharsDefault, "Reset the set of characters for whitespace and word characters to the defaults.")
		.def("AutoCGetCurrent", &ScintillaWrapper::AutoCGetCurrent, "Get currently selected item position in the auto-completion list")
		.def("AutoCGetCurrentText", &ScintillaWrapper::AutoCGetCurrentText, "Get currently selected item text in the auto-completion list\nReturns the length of the item text")
		.def("Allocate", &ScintillaWrapper::Allocate, "Enlarge the document to a particular size of text bytes.")
		.def("TargetAsUTF8", &ScintillaWrapper::TargetAsUTF8, "Returns the target converted to UTF8.\nReturn the length in bytes.")
		.def("SetLengthForEncode", &ScintillaWrapper::SetLengthForEncode, "Set the length of the utf8 argument for calling EncodedFromUTF8.\nSet to -1 and the string will be measured to the first nul.")
		.def("EncodedFromUTF8", &ScintillaWrapper::EncodedFromUTF8, "Translates a UTF8 string into the document encoding.\nReturn the length of the result in bytes.\nOn error return 0.")
		.def("FindColumn", &ScintillaWrapper::FindColumn, "Find the position of a column on a line taking into account tabs and\nmulti-byte characters. If beyond end of line, return line end position.")
		.def("GetCaretSticky", &ScintillaWrapper::GetCaretSticky, "Can the caret preferred x position only be changed by explicit movement commands?")
		.def("SetCaretSticky", &ScintillaWrapper::SetCaretSticky, "Stop the caret preferred x position changing when the user types.")
		.def("ToggleCaretSticky", &ScintillaWrapper::ToggleCaretSticky, "Switch between sticky and non-sticky: meant to be bound to a key.")
		.def("SetPasteConvertEndings", &ScintillaWrapper::SetPasteConvertEndings, "Enable/Disable convert-on-paste for line endings")
		.def("GetPasteConvertEndings", &ScintillaWrapper::GetPasteConvertEndings, "Get convert-on-paste setting")
		.def("SelectionDuplicate", &ScintillaWrapper::SelectionDuplicate, "Duplicate the selection. If selection empty duplicate the line containing the caret.")
		.def("SetCaretLineBackAlpha", &ScintillaWrapper::SetCaretLineBackAlpha, "Set background alpha of the caret line.")
		.def("GetCaretLineBackAlpha", &ScintillaWrapper::GetCaretLineBackAlpha, "Get the background alpha of the caret line.")
		.def("SetCaretStyle", &ScintillaWrapper::SetCaretStyle, "Set the style of the caret to be drawn.")
		.def("GetCaretStyle", &ScintillaWrapper::GetCaretStyle, "Returns the current style of the caret.")
		.def("SetIndicatorCurrent", &ScintillaWrapper::SetIndicatorCurrent, "Set the indicator used for IndicatorFillRange and IndicatorClearRange")
		.def("GetIndicatorCurrent", &ScintillaWrapper::GetIndicatorCurrent, "Get the current indicator")
		.def("SetIndicatorValue", &ScintillaWrapper::SetIndicatorValue, "Set the value used for IndicatorFillRange")
		.def("GetIndicatorValue", &ScintillaWrapper::GetIndicatorValue, "Get the current indicator vaue")
		.def("IndicatorFillRange", &ScintillaWrapper::IndicatorFillRange, "Turn a indicator on over a range.")
		.def("IndicatorClearRange", &ScintillaWrapper::IndicatorClearRange, "Turn a indicator off over a range.")
		.def("IndicatorAllOnFor", &ScintillaWrapper::IndicatorAllOnFor, "Are any indicators present at position?")
		.def("IndicatorValueAt", &ScintillaWrapper::IndicatorValueAt, "What value does a particular indicator have at at a position?")
		.def("IndicatorStart", &ScintillaWrapper::IndicatorStart, "Where does a particular indicator start?")
		.def("IndicatorEnd", &ScintillaWrapper::IndicatorEnd, "Where does a particular indicator end?")
		.def("SetPositionCache", &ScintillaWrapper::SetPositionCache, "Set number of entries in position cache")
		.def("GetPositionCache", &ScintillaWrapper::GetPositionCache, "How many entries are allocated to the position cache?")
		.def("CopyAllowLine", &ScintillaWrapper::CopyAllowLine, "Copy the selection, if selection empty copy the line with the caret")
		.def("GetCharacterPointer", &ScintillaWrapper::GetCharacterPointer, "Compact the document buffer and return a read-only pointer to the\ncharacters in the document.")
		.def("SetKeysUnicode", &ScintillaWrapper::SetKeysUnicode, "Always interpret keyboard input as Unicode")
		.def("GetKeysUnicode", &ScintillaWrapper::GetKeysUnicode, "Are keys always interpreted as Unicode?")
		.def("IndicSetAlpha", &ScintillaWrapper::IndicSetAlpha, "Set the alpha fill colour of the given indicator.")
		.def("IndicGetAlpha", &ScintillaWrapper::IndicGetAlpha, "Get the alpha fill colour of the given indicator.")
		.def("SetExtraAscent", &ScintillaWrapper::SetExtraAscent, "Set extra ascent for each line")
		.def("GetExtraAscent", &ScintillaWrapper::GetExtraAscent, "Get extra ascent for each line")
		.def("SetExtraDescent", &ScintillaWrapper::SetExtraDescent, "Set extra descent for each line")
		.def("GetExtraDescent", &ScintillaWrapper::GetExtraDescent, "Get extra descent for each line")
		.def("MarkerSymbolDefined", &ScintillaWrapper::MarkerSymbolDefined, "Which symbol was defined for markerNumber with MarkerDefine")
		.def("MarginSetText", &ScintillaWrapper::MarginSetText, "Set the text in the text margin for a line")
		.def("MarginGetText", &ScintillaWrapper::MarginGetText, "Get the text in the text margin for a line")
		.def("MarginSetStyle", &ScintillaWrapper::MarginSetStyle, "Set the style number for the text margin for a line")
		.def("MarginGetStyle", &ScintillaWrapper::MarginGetStyle, "Get the style number for the text margin for a line")
		.def("MarginSetStyles", &ScintillaWrapper::MarginSetStyles, "Set the style in the text margin for a line")
		.def("MarginGetStyles", &ScintillaWrapper::MarginGetStyles, "Get the styles in the text margin for a line")
		.def("MarginTextClearAll", &ScintillaWrapper::MarginTextClearAll, "Clear the margin text on all lines")
		.def("MarginSetStyleOffset", &ScintillaWrapper::MarginSetStyleOffset, "Get the start of the range of style numbers used for margin text")
		.def("MarginGetStyleOffset", &ScintillaWrapper::MarginGetStyleOffset, "Get the start of the range of style numbers used for margin text")
		.def("AnnotationSetText", &ScintillaWrapper::AnnotationSetText, "Set the annotation text for a line")
		.def("AnnotationGetText", &ScintillaWrapper::AnnotationGetText, "Get the annotation text for a line")
		.def("AnnotationSetStyle", &ScintillaWrapper::AnnotationSetStyle, "Set the style number for the annotations for a line")
		.def("AnnotationGetStyle", &ScintillaWrapper::AnnotationGetStyle, "Get the style number for the annotations for a line")
		.def("AnnotationSetStyles", &ScintillaWrapper::AnnotationSetStyles, "Set the annotation styles for a line")
		.def("AnnotationGetStyles", &ScintillaWrapper::AnnotationGetStyles, "Get the annotation styles for a line")
		.def("AnnotationGetLines", &ScintillaWrapper::AnnotationGetLines, "Get the number of annotation lines for a line")
		.def("AnnotationClearAll", &ScintillaWrapper::AnnotationClearAll, "Clear the annotations from all lines")
		.def("AnnotationSetVisible", &ScintillaWrapper::AnnotationSetVisible, "Set the visibility for the annotations for a view")
		.def("AnnotationGetVisible", &ScintillaWrapper::AnnotationGetVisible, "Get the visibility for the annotations for a view")
		.def("AnnotationSetStyleOffset", &ScintillaWrapper::AnnotationSetStyleOffset, "Get the start of the range of style numbers used for annotations")
		.def("AnnotationGetStyleOffset", &ScintillaWrapper::AnnotationGetStyleOffset, "Get the start of the range of style numbers used for annotations")
		.def("AddUndoAction", &ScintillaWrapper::AddUndoAction, "Add a container action to the undo stack")
		.def("CharPositionFromPoint", &ScintillaWrapper::CharPositionFromPoint, "Find the position of a character from a point within the window.")
		.def("CharPositionFromPointClose", &ScintillaWrapper::CharPositionFromPointClose, "Find the position of a character from a point within the window.\nReturn INVALID_POSITION if not close to text.")
		.def("SetMultipleSelection", &ScintillaWrapper::SetMultipleSelection, "Set whether multiple selections can be made")
		.def("GetMultipleSelection", &ScintillaWrapper::GetMultipleSelection, "Whether multiple selections can be made")
		.def("SetAdditionalSelectionTyping", &ScintillaWrapper::SetAdditionalSelectionTyping, "Set whether typing can be performed into multiple selections")
		.def("GetAdditionalSelectionTyping", &ScintillaWrapper::GetAdditionalSelectionTyping, "Whether typing can be performed into multiple selections")
		.def("SetAdditionalCaretsBlink", &ScintillaWrapper::SetAdditionalCaretsBlink, "Set whether additional carets will blink")
		.def("GetAdditionalCaretsBlink", &ScintillaWrapper::GetAdditionalCaretsBlink, "Whether additional carets will blink")
		.def("SetAdditionalCaretsVisible", &ScintillaWrapper::SetAdditionalCaretsVisible, "Set whether additional carets are visible")
		.def("GetAdditionalCaretsVisible", &ScintillaWrapper::GetAdditionalCaretsVisible, "Whether additional carets are visible")
		.def("GetSelections", &ScintillaWrapper::GetSelections, "How many selections are there?")
		.def("ClearSelections", &ScintillaWrapper::ClearSelections, "Clear selections to a single empty stream selection")
		.def("SetSelection", &ScintillaWrapper::SetSelection, "Set a simple selection")
		.def("AddSelection", &ScintillaWrapper::AddSelection, "Add a selection")
		.def("SetMainSelection", &ScintillaWrapper::SetMainSelection, "Set the main selection")
		.def("GetMainSelection", &ScintillaWrapper::GetMainSelection, "Which selection is the main selection")
		.def("SetSelectionNCaret", &ScintillaWrapper::SetSelectionNCaret, "Which selection is the main selection")
		.def("GetSelectionNCaret", &ScintillaWrapper::GetSelectionNCaret, "Which selection is the main selection")
		.def("SetSelectionNAnchor", &ScintillaWrapper::SetSelectionNAnchor, "Which selection is the main selection")
		.def("GetSelectionNAnchor", &ScintillaWrapper::GetSelectionNAnchor, "Which selection is the main selection")
		.def("SetSelectionNCaretVirtualSpace", &ScintillaWrapper::SetSelectionNCaretVirtualSpace, "Which selection is the main selection")
		.def("GetSelectionNCaretVirtualSpace", &ScintillaWrapper::GetSelectionNCaretVirtualSpace, "Which selection is the main selection")
		.def("SetSelectionNAnchorVirtualSpace", &ScintillaWrapper::SetSelectionNAnchorVirtualSpace, "Which selection is the main selection")
		.def("GetSelectionNAnchorVirtualSpace", &ScintillaWrapper::GetSelectionNAnchorVirtualSpace, "Which selection is the main selection")
		.def("SetSelectionNStart", &ScintillaWrapper::SetSelectionNStart, "Sets the position that starts the selection - this becomes the anchor.")
		.def("GetSelectionNStart", &ScintillaWrapper::GetSelectionNStart, "Returns the position at the start of the selection.")
		.def("SetSelectionNEnd", &ScintillaWrapper::SetSelectionNEnd, "Sets the position that ends the selection - this becomes the currentPosition.")
		.def("GetSelectionNEnd", &ScintillaWrapper::GetSelectionNEnd, "Returns the position at the end of the selection.")
		.def("SetRectangularSelectionCaret", &ScintillaWrapper::SetRectangularSelectionCaret, "Returns the position at the end of the selection.")
		.def("GetRectangularSelectionCaret", &ScintillaWrapper::GetRectangularSelectionCaret, "Returns the position at the end of the selection.")
		.def("SetRectangularSelectionAnchor", &ScintillaWrapper::SetRectangularSelectionAnchor, "Returns the position at the end of the selection.")
		.def("GetRectangularSelectionAnchor", &ScintillaWrapper::GetRectangularSelectionAnchor, "Returns the position at the end of the selection.")
		.def("SetRectangularSelectionCaretVirtualSpace", &ScintillaWrapper::SetRectangularSelectionCaretVirtualSpace, "Returns the position at the end of the selection.")
		.def("GetRectangularSelectionCaretVirtualSpace", &ScintillaWrapper::GetRectangularSelectionCaretVirtualSpace, "Returns the position at the end of the selection.")
		.def("SetRectangularSelectionAnchorVirtualSpace", &ScintillaWrapper::SetRectangularSelectionAnchorVirtualSpace, "Returns the position at the end of the selection.")
		.def("GetRectangularSelectionAnchorVirtualSpace", &ScintillaWrapper::GetRectangularSelectionAnchorVirtualSpace, "Returns the position at the end of the selection.")
		.def("SetVirtualSpaceOptions", &ScintillaWrapper::SetVirtualSpaceOptions, "Returns the position at the end of the selection.")
		.def("GetVirtualSpaceOptions", &ScintillaWrapper::GetVirtualSpaceOptions, "Returns the position at the end of the selection.")
		.def("SetRectangularSelectionModifier", &ScintillaWrapper::SetRectangularSelectionModifier, "On GTK+, allow selecting the modifier key to use for mouse-based\nrectangular selection. Often the window manager requires Alt+Mouse Drag\nfor moving windows.\nValid values are SCMOD_CTRL(default), SCMOD_ALT, or SCMOD_SUPER.")
		.def("GetRectangularSelectionModifier", &ScintillaWrapper::GetRectangularSelectionModifier, "Get the modifier key used for rectangular selection.")
		.def("SetAdditionalSelFore", &ScintillaWrapper::SetAdditionalSelFore, "Set the foreground colour of additional selections.\nMust have previously called SetSelFore with non-zero first argument for this to have an effect.")
		.def("SetAdditionalSelBack", &ScintillaWrapper::SetAdditionalSelBack, "Set the background colour of additional selections.\nMust have previously called SetSelBack with non-zero first argument for this to have an effect.")
		.def("SetAdditionalSelAlpha", &ScintillaWrapper::SetAdditionalSelAlpha, "Set the alpha of the selection.")
		.def("GetAdditionalSelAlpha", &ScintillaWrapper::GetAdditionalSelAlpha, "Get the alpha of the selection.")
		.def("SetAdditionalCaretFore", &ScintillaWrapper::SetAdditionalCaretFore, "Set the foreground colour of additional carets.")
		.def("GetAdditionalCaretFore", &ScintillaWrapper::GetAdditionalCaretFore, "Get the foreground colour of additional carets.")
		.def("RotateSelection", &ScintillaWrapper::RotateSelection, "Set the main selection to the next selection.")
		.def("SwapMainAnchorCaret", &ScintillaWrapper::SwapMainAnchorCaret, "Swap that caret and anchor of the main selection.")
		.def("StartRecord", &ScintillaWrapper::StartRecord, "Start notifying the container of all key presses and commands.")
		.def("StopRecord", &ScintillaWrapper::StopRecord, "Stop notifying the container of all key presses and commands.")
		.def("SetLexer", &ScintillaWrapper::SetLexer, "Set the lexing language of the document.")
		.def("GetLexer", &ScintillaWrapper::GetLexer, "Retrieve the lexing language of the document.")
		.def("Colourise", &ScintillaWrapper::Colourise, "Colourise a segment of the document using the current lexing language.")
		.def("SetProperty", &ScintillaWrapper::SetProperty, "Set up a value that may be used by a lexer for some optional feature.")
		.def("SetKeyWords", &ScintillaWrapper::SetKeyWords, "Set up the key words used by the lexer.")
		.def("SetLexerLanguage", &ScintillaWrapper::SetLexerLanguage, "Set the lexing language of the document based on string name.")
		.def("LoadLexerLibrary", &ScintillaWrapper::LoadLexerLibrary, "Load a lexer library (dll / so).")
		.def("GetProperty", &ScintillaWrapper::GetProperty, "Retrieve a \"property\" value previously set with SetProperty.")
		.def("GetPropertyExpanded", &ScintillaWrapper::GetPropertyExpanded, "Retrieve a \"property\" value previously set with SetProperty,\nwith \"$()\" variable replacement on returned buffer.")
		.def("GetPropertyInt", &ScintillaWrapper::GetPropertyInt, "Retrieve a \"property\" value previously set with SetProperty,\ninterpreted as an int AFTER any \"$()\" variable replacement.")
		.def("GetStyleBitsNeeded", &ScintillaWrapper::GetStyleBitsNeeded, "Retrieve the number of bits the current lexer needs for styling.")
		.def("GetLexerLanguage", &ScintillaWrapper::GetLexerLanguage, "Retrieve the name of the lexer.\nReturn the length of the text.")
